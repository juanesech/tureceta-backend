buildscript {
	ext {
		kotlinVersion = '1.2.51'
		springBootVersion = '2.0.3.RELEASE'
		coverageSourceDirs = 'src/test/kotlin'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
	}
}

plugins {
  id "org.sonarqube" version "2.6.2"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'


sonarqube {
	properties {
		property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
	}
}
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.jetbrains.kotlin:kotlin-test')
	testCompile('org.jetbrains.kotlin:kotlin-test-junit')
	testCompile('com.github.fakemongo:fongo:2.1.0')
}

task codeCoverageReport(type: JacocoReport) {

	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
		sourceDirectories = fileTree(dir: "src/main/kotlin/")
		classDirectories = fileTree(dir: "build/classes/kotlin/main")
	}
}
